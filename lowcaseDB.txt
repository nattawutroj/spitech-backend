-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Faculty"
(
    "Faculty_Code" integer NOT NULL,
    "Faculty_Name" text NOT NULL,
    PRIMARY KEY ("Faculty_Code")
);

CREATE TABLE IF NOT EXISTS public."Department"
(
    "Department_Code" integer NOT NULL,
    "Department_Name" text NOT NULL,
    "Faculty_Code" integer NOT NULL,
    PRIMARY KEY ("Department_Code")
);

CREATE TABLE IF NOT EXISTS public."Name_Title"
(
    "ID_Name_Title" serial NOT NULL,
    "Name_Title_TH" text NOT NULL,
    "Name_Title_EN" text,
    PRIMARY KEY ("ID_Name_Title")
);

CREATE TABLE IF NOT EXISTS public."Course"
(
    "Course_Code" integer NOT NULL,
    "Course_Name" text NOT NULL,
    PRIMARY KEY ("Course_Code")
);

CREATE TABLE IF NOT EXISTS public."Major"
(
    "Major_Code" integer NOT NULL,
    "Major_Name" text NOT NULL,
    "Department_Code" integer NOT NULL,
    PRIMARY KEY ("Major_Code")
);

CREATE TABLE IF NOT EXISTS public."Semester"
(
    "ID_Semester" serial NOT NULL,
    "Semester" text NOT NULL,
    "Year" text NOT NULL,
    PRIMARY KEY ("ID_Semester")
);

CREATE TABLE IF NOT EXISTS public."Student"
(
    "ID_Student" serial NOT NULL,
    "Student_Code" text NOT NULL,
    "ID_Name_Title" integer NOT NULL,
    "First_Name_TH" text NOT NULL,
    "Last_Name_TH" text NOT NULL,
    "First_Name_EN" text NOT NULL,
    "Last_Name_EN" text NOT NULL,
    "Phone" text NOT NULL,
    "Address" text NOT NULL,
    "Email" text NOT NULL,
    "Major_Code" integer NOT NULL,
    "Course_Code" integer NOT NULL,
    "Password" text NOT NULL,
    PRIMARY KEY ("ID_Student")
);

CREATE TABLE IF NOT EXISTS public."Staff"
(
    "ID_Staff" serial NOT NULL,
    "Username" text NOT NULL,
    "Initials" text,
    "ID_Name_Title" integer NOT NULL,
    "First_Name_TH" text NOT NULL,
    "Last_Name_TH" text NOT NULL,
    "First_Name_EN" text NOT NULL,
    "Last_Name_EN" text NOT NULL,
    "Phone" text NOT NULL,
    "Address" text,
    "Email" text NOT NULL,
    "Password" text NOT NULL,
    "ID_Role" integer NOT NULL,
    PRIMARY KEY ("ID_Staff")
);

CREATE TABLE IF NOT EXISTS public."Project"
(
    "ID_Project" text NOT NULL,
    "Project_Title_TH" text NOT NULL,
    "Project_Title_EN" text NOT NULL,
    "Case_Study_Title_TH" text,
    "Case_Study_Title_EN" text,
    "Build_Timestamp" timestamp with time zone NOT NULL default current_timestamp,
    "ID_Semester" integer NOT NULL,
    PRIMARY KEY ("ID_Project")
);

CREATE TABLE IF NOT EXISTS public."Project_Member"
(
    "ID_Project_Member" serial NOT NULL,
    "ID_Project" text NOT NULL,
    "ID_Student" integer NOT NULL,
    PRIMARY KEY ("ID_Project_Member")
);

CREATE TABLE IF NOT EXISTS public."Project_Staff_Position"
(
    "ID_Project_Staff_Position" serial NOT NULL,
    "Project_Staff_Position_Title" text NOT NULL,
    PRIMARY KEY ("ID_Project_Staff_Position")
);

CREATE TABLE IF NOT EXISTS public."Project_Staff"
(
    "ID_Project_Staff" serial NOT NULL,
    "ID_Project" text NOT NULL,
    "ID_Staff" integer NOT NULL,
    "ID_Project_Staff_Position" integer NOT NULL,
    PRIMARY KEY ("ID_Project_Staff")
);

CREATE TABLE IF NOT EXISTS public."Project_OS_Staff"
(
    "ID_Project_OS_Staff" serial NOT NULL,
    "ID_Project" text NOT NULL,
    "ID_Project_Staff_Position" integer NOT NULL,
    "ID_Name_Title" integer NOT NULL,
    "First_Name_TH" text NOT NULL,
    "Last_Name_TH" text NOT NULL,
    "First_Name_EN" text NOT NULL,
    "Last_Name_EN" text NOT NULL,
    "Phone" text NOT NULL,
    "Email" text NOT NULL,
    PRIMARY KEY ("ID_Project_OS_Staff")
);

CREATE TABLE IF NOT EXISTS public."News"
(
    "ID_News" serial NOT NULL,
    "Logo_Path" path NOT NULL,
    "Topic" text NOT NULL,
    "Arctical" text,
    "File_Path" path,
    "Build_Timestamp" timestamp with time zone NOT NULL default current_timestamp,
    "ID_Staff" integer NOT NULL,
    PRIMARY KEY ("ID_News")
);

CREATE TABLE IF NOT EXISTS public."Download_Library"
(
    "ID_Download_Library" serial,
    "Topic" text,
    "File_Path" path,
    "Build_Timestamp" timestamp with time zone NOT NULL default current_timestamp,
    "ID_Staff" integer
);

CREATE TABLE IF NOT EXISTS public."Log_Project"
(
    "ID_Log_Project" serial NOT NULL,
    "ID_Project" text NOT NULL,
    "Log_Timestamp" time with time zone NOT NULL,
    "Detail" text NOT NULL,
    PRIMARY KEY ("ID_Log_Project")
);

CREATE TABLE IF NOT EXISTS public."Test_Category"
(
    "ID_Test_Category" serial NOT NULL,
    "Test_Category_Title" text NOT NULL,
    PRIMARY KEY ("ID_Test_Category")
);

CREATE TABLE IF NOT EXISTS public."Room"
(
    "ID_Room" serial NOT NULL,
    "Room_Title" text NOT NULL,
    PRIMARY KEY ("ID_Room")
);

CREATE TABLE IF NOT EXISTS public."Schedule"
(
    "ID_Schedule" serial NOT NULL,
    "ID_Project" text NOT NULL,
    "ID_Test_Category" integer NOT NULL,
    "ID_Room" integer NOT NULL,
    "DateTime_Start" time with time zone NOT NULL,
    "DateTime_End" time with time zone NOT NULL,
    PRIMARY KEY ("ID_Schedule")
);

CREATE TABLE IF NOT EXISTS public."Status_Document"
(
    "ID_Status_Document" serial NOT NULL,
    "Status_Document_Title" text NOT NULL,
    PRIMARY KEY ("ID_Status_Document")
);

CREATE TABLE IF NOT EXISTS public."Project_Status_Title"
(
    "ID_Project_Status_Title" serial NOT NULL,
    "Project_Status_Name_Title" text NOT NULL,
    "Document_Boolean" boolean NOT NULL,
    "Document_Title" text,
    PRIMARY KEY ("ID_Project_Status_Title")
);

CREATE TABLE IF NOT EXISTS public."Project_Status"
(
    "ID_Project_Status" serial NOT NULL,
    "ID_Project" text NOT NULL,
    "ID_Project_Status_Title" integer NOT NULL,
    "Status_Alert" integer,
    "Status_Boolean" boolean,
    "Status_Timestamp" time with time zone,
    PRIMARY KEY ("ID_Project_Status")
);

CREATE TABLE IF NOT EXISTS public."Project_Document"
(
    "ID_Project_Document" serial NOT NULL,
    "ID_Project" text NOT NULL,
    "Document_Title" integer NOT NULL,
    "Document_Path" path,
    "ID_Status_Document" integer,
    "Comment" text,
    PRIMARY KEY ("ID_Project_Document")
);

CREATE TABLE IF NOT EXISTS public."Document_Autofill"
(
    "ID_Document_Autofill" serial NOT NULL,
    "ID_Project_Document" integer NOT NULL,
    "Text" text,
    PRIMARY KEY ("ID_Document_Autofill")
);

CREATE TABLE IF NOT EXISTS public."Role"
(
    "ID_Role" serial NOT NULL,
    "Role_Title" text NOT NULL,
    PRIMARY KEY ("ID_Role")
);

ALTER TABLE IF EXISTS public."Department"
    ADD CONSTRAINT "Faculty_Code" FOREIGN KEY ("Faculty_Code")
    REFERENCES public."Faculty" ("Faculty_Code") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Major"
    ADD CONSTRAINT "Department_Code" FOREIGN KEY ("Department_Code")
    REFERENCES public."Department" ("Department_Code") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Student"
    ADD CONSTRAINT "ID_Name_Title" FOREIGN KEY ("ID_Name_Title")
    REFERENCES public."Name_Title" ("ID_Name_Title") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Student"
    ADD CONSTRAINT "Major_Code" FOREIGN KEY ("Major_Code")
    REFERENCES public."Major" ("Major_Code") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Student"
    ADD CONSTRAINT "Course_Code" FOREIGN KEY ("Course_Code")
    REFERENCES public."Course" ("Course_Code") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Staff"
    ADD CONSTRAINT "ID_Name_Title" FOREIGN KEY ("ID_Name_Title")
    REFERENCES public."Name_Title" ("ID_Name_Title") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Staff"
    ADD CONSTRAINT "ID_Role" FOREIGN KEY ("ID_Role")
    REFERENCES public."Role" ("ID_Role") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project"
    ADD FOREIGN KEY ("ID_Semester")
    REFERENCES public."Semester" ("ID_Semester") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Member"
    ADD CONSTRAINT "ID_Project" FOREIGN KEY ("ID_Project")
    REFERENCES public."Project" ("ID_Project") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Member"
    ADD CONSTRAINT "ID_Student" FOREIGN KEY ("ID_Student")
    REFERENCES public."Student" ("ID_Student") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Staff"
    ADD CONSTRAINT "ID_Project" FOREIGN KEY ("ID_Project")
    REFERENCES public."Project" ("ID_Project") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Staff"
    ADD CONSTRAINT "ID_Staff" FOREIGN KEY ("ID_Staff")
    REFERENCES public."Staff" ("ID_Staff") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Staff"
    ADD CONSTRAINT "ID_Project_Staff_Position" FOREIGN KEY ("ID_Project_Staff_Position")
    REFERENCES public."Project_Staff_Position" ("ID_Project_Staff_Position") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_OS_Staff"
    ADD CONSTRAINT "ID_Project" FOREIGN KEY ("ID_Project")
    REFERENCES public."Project" ("ID_Project") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_OS_Staff"
    ADD CONSTRAINT "ID_Name_Title" FOREIGN KEY ("ID_Name_Title")
    REFERENCES public."Name_Title" ("ID_Name_Title") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_OS_Staff"
    ADD CONSTRAINT "ID_Project_Staff_Position" FOREIGN KEY ("ID_Project_Staff_Position")
    REFERENCES public."Project_Staff_Position" ("ID_Project_Staff_Position") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."News"
    ADD CONSTRAINT "ID_Staff" FOREIGN KEY ("ID_Staff")
    REFERENCES public."Staff" ("ID_Staff") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Download_Library"
    ADD CONSTRAINT "ID_Staff" FOREIGN KEY ("ID_Staff")
    REFERENCES public."Staff" ("ID_Staff") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Log_Project"
    ADD CONSTRAINT "ID_Project" FOREIGN KEY ("ID_Project")
    REFERENCES public."Project" ("ID_Project") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Schedule"
    ADD CONSTRAINT "ID_Project" FOREIGN KEY ("ID_Project")
    REFERENCES public."Project" ("ID_Project") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Schedule"
    ADD CONSTRAINT "ID_Test_Category" FOREIGN KEY ("ID_Test_Category")
    REFERENCES public."Test_Category" ("ID_Test_Category") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Schedule"
    ADD CONSTRAINT "ID_Room" FOREIGN KEY ("ID_Room")
    REFERENCES public."Room" ("ID_Room") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Status"
    ADD CONSTRAINT "ID_Project" FOREIGN KEY ("ID_Project")
    REFERENCES public."Project" ("ID_Project") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Status"
    ADD CONSTRAINT "ID_Project_Status_Title" FOREIGN KEY ("ID_Project_Status_Title")
    REFERENCES public."Project_Status_Title" ("ID_Project_Status_Title") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Status"
    ADD CONSTRAINT "Status_Alert" FOREIGN KEY ("Status_Alert")
    REFERENCES public."Status_Document" ("ID_Status_Document") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

COMMENT ON CONSTRAINT "Status_Alert" ON public."Project_Status"
    IS 'Use Data From Status_Document';



ALTER TABLE IF EXISTS public."Project_Document"
    ADD CONSTRAINT "ID_Project" FOREIGN KEY ("ID_Project")
    REFERENCES public."Project" ("ID_Project") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Document"
    ADD CONSTRAINT "ID_Status_Document" FOREIGN KEY ("ID_Status_Document")
    REFERENCES public."Status_Document" ("ID_Status_Document") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Project_Document"
    ADD CONSTRAINT "Document_Title" FOREIGN KEY ("Document_Title")
    REFERENCES public."Project_Status_Title" ("ID_Project_Status_Title") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

COMMENT ON CONSTRAINT "Document_Title" ON public."Project_Document"
    IS 'Use Title Form (public) Project_Status_Title -> Document_Title';



ALTER TABLE IF EXISTS public."Document_Autofill"
    ADD CONSTRAINT "ID_Project_Document" FOREIGN KEY ("ID_Project_Document")
    REFERENCES public."Project_Document" ("ID_Project_Document") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;

do language plpgsql $$
declare
    r record;
begin
    for r in
        select relname, attname
        from pg_attribute a
        inner join pg_class c on a.attrelid = c.oid
        inner join pg_namespace n on c.relnamespace = n.oid
        where 
            n.nspname = 'public'
            and
            attname != lower(attname)
            and
            not attisdropped
    loop
        execute format('
            alter table %1$I rename column %2$I to %3$s
        ', r.relname, r.attname, lower(r.attname));
    end loop;
end;
$$;